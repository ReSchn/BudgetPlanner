-- Migration: Create budget_items table
-- Description: Planned budget amounts per category per month
-- Dependencies: Requires categories and monthly_budgets tables

-- Create budget_items table
CREATE TABLE IF NOT EXISTS "public"."budget_items" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "planned_amount" numeric DEFAULT '0'::numeric NOT NULL,
    "monthly_budget_id" bigint NOT NULL,
    "category_id" bigint NOT NULL
);

-- Set table owner
ALTER TABLE "public"."budget_items" OWNER TO "postgres";

-- Add table comment
COMMENT ON TABLE "public"."budget_items" IS 'Planned budget amounts per category per month';

-- Create auto-incrementing ID
ALTER TABLE "public"."budget_items" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."budget_items_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);

-- Add primary key constraint
ALTER TABLE ONLY "public"."budget_items"
    ADD CONSTRAINT "budget_items_pkey" PRIMARY KEY ("id");

-- Add foreign key constraints
ALTER TABLE ONLY "public"."budget_items"
    ADD CONSTRAINT "budget_items_category_id_fkey" 
    FOREIGN KEY ("category_id") REFERENCES "public"."categories"("id") ON DELETE CASCADE;

ALTER TABLE ONLY "public"."budget_items"
    ADD CONSTRAINT "budget_items_monthly_budget_id_fkey" 
    FOREIGN KEY ("monthly_budget_id") REFERENCES "public"."monthly_budgets"("id") ON DELETE CASCADE;

-- Enable Row Level Security
ALTER TABLE "public"."budget_items" ENABLE ROW LEVEL SECURITY;

-- Create RLS policies (access control via monthly_budgets relationship)
CREATE POLICY "budget_items_select_policy" ON "public"."budget_items" 
    FOR SELECT TO "authenticated" 
    USING ((EXISTS ( SELECT 1
       FROM "public"."monthly_budgets"
      WHERE (("monthly_budgets"."id" = "budget_items"."monthly_budget_id") 
         AND ("monthly_budgets"."user_id" = "auth"."uid"())))));

CREATE POLICY "budget_items_insert_policy" ON "public"."budget_items" 
    FOR INSERT TO "authenticated" 
    WITH CHECK ((EXISTS ( SELECT 1
       FROM "public"."monthly_budgets"
      WHERE (("monthly_budgets"."id" = "budget_items"."monthly_budget_id") 
         AND ("monthly_budgets"."user_id" = "auth"."uid"())))));

CREATE POLICY "budget_items_update_policy" ON "public"."budget_items" 
    FOR UPDATE TO "authenticated" 
    USING ((EXISTS ( SELECT 1
       FROM "public"."monthly_budgets"
      WHERE (("monthly_budgets"."id" = "budget_items"."monthly_budget_id") 
         AND ("monthly_budgets"."user_id" = "auth"."uid"())))))
    WITH CHECK ((EXISTS ( SELECT 1
       FROM "public"."monthly_budgets"
      WHERE (("monthly_budgets"."id" = "budget_items"."monthly_budget_id") 
         AND ("monthly_budgets"."user_id" = "auth"."uid"())))));

CREATE POLICY "budget_items_delete_policy" ON "public"."budget_items" 
    FOR DELETE TO "authenticated" 
    USING ((EXISTS ( SELECT 1
       FROM "public"."monthly_budgets"
      WHERE (("monthly_budgets"."id" = "budget_items"."monthly_budget_id") 
         AND ("monthly_budgets"."user_id" = "auth"."uid"())))));

-- Grant permissions
GRANT ALL ON TABLE "public"."budget_items" TO "anon";
GRANT ALL ON TABLE "public"."budget_items" TO "authenticated";
GRANT ALL ON TABLE "public"."budget_items" TO "service_role";

GRANT ALL ON SEQUENCE "public"."budget_items_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."budget_items_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."budget_items_id_seq" TO "service_role";